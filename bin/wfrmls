#!/usr/bin/env ruby
$: << File.dirname(__FILE__)+'/../lib'

CONFIG_FILE_NAME = File.expand_path('~/wfrmls_config.yml')

require 'configliere'
require 'watir'
require 'watir/ie'
require 'wfrmls/residential_search'
require 'wfrmls/tax_data_search'
require 'wfrmls/reo'

Settings.use :define, :commandline, :commands

Settings.define_command :comp,      description: "Find comparisons for ADDRESS."
Settings.define_command :overview,  description: "Show overview for ADDRESS."
Settings.define_command :details,   description: "Show details for ADDRESS."
Settings.define_command :reo,       description: "Find bank owned properties."

Settings.define :output, description: "Store details in FILE.",
  flag: :o, default: "last.yml"
Settings.define :input, description: "Use details from FILE.",
  flag: :i, default: "last.yml"

Settings.define :status, description: "Sale status.",
  type: Array, default: ['Active', 'Sold', 'Under Contract', 'Expired']
Settings.define :days_back, description: "Compare NUMBER of days back.",
  type: Integer, default: 120

Settings.read CONFIG_FILE_NAME

Settings.resolve!

# TODO save username and password into config file if new or not there

address = Settings.rest.join(' ')

Watir::Browser.default = 'ie'
ie = Watir::Browser.new

def lookup_address(addr, search,  td_search)
  search.find_address_on_search_page(addr)

  if search.results_availible?
    search.show_full_listings
  else
    td_search.show_tax_data(addr)
  end
end

rsearch = Wfrmls::ResidentialSearch.new(ie)
tdsearch = Wfrmls::TaxDataSearch.new(ie)

if address.empty?
  begin
    rsearch.find_address_on_search_page(nil)
  rescue
    exit
  end
end

addr = StreetAddress::US.parse(address)
if addr.nil?
  addr = StreetAddress::US.parse(address+', UT')
end

puts addr

if Settings.command_name == :reo
  search = Wfrmls::ResidentialSearch.new(ie, auth)
  reo = Wfrmls::Reo.new(search)

  reo.find

  exit
end

if Settings.command_name == :overview
  rsearch.lookup_opposition(addr)
else
  details = tdsearch.collect_property_details(addr)
  puts details.to_yaml
  if Settings.command_name == :comp
    rsearch.comp(addr, details) unless details.empty?
  else
    lookup_address(addr, rsearch, tdsearch)
  end
end
